mongodb
-------

- Database - used to store data in a large scale.

- Nosql

- not properly structured database.

refer - difference between sql and Nosql

mongodb
-------
structure
---------
- mongodb deployment can have more than one database.
- each database have collections to store data
- group of documents is called collection
- each document is in json format
- each key : value pair is called field.
- each document have a unique identifier (_id - automatically generated by mongodb)

mongodb compass - local
mongodb atlas - cloud

operations
----------

commands
--------

_MONGOSH - mongodb shell to run mongodb commands.

1) show dbs - It list out all the database available in mongodb.
2) use databasename - to move into a particular database.
3) show collections - to list out all the collections available in a particular database.
4) db.collectionname.find() - get all documents inside a particular collection.
5) db.collectionname.findOne({condition}) - to get all document that satisfy the particular condition.
6) db.collectionname.find().limit(number) - is used to get a limited number of documents.

arranging the document
----------------------

7)db.collectionname.find().sort({username:1}) - to sort in ascending order 
8)db.collectionname.find().sort({username:-1}) - to sort in descending order 

add document
------------

9)db.users.insertOne({"username":"mini","email":"mini@gmail.com","password":"mini456"})
10)db.users.insertMany([{name:"hari",age:20,debt:500,balance:5000},{name:'aju',age:24,debt:5000,balance:500}])

query based
-----------

11) db.collectionname.find({age:{$lt:25}}) - less than
12) db.collectionname.find({age:{$lte:25}}) - less than or equal to

13) db.collectionname.find({age:{$gt:25}}) - greater than
14) db.collectionname.find({age:{$gte:25}}) - greater than or equal to

15) db.collectionname.find({$or:[{age:{$gt:20}},{age:{$gt:24}}]}) - any one condition need to be satisfied
    - return the document if satisfied otherwise null
16) db.collectionname.find({$and:[{age:{$gt:20}},{age:{$gt:24}}]}) - both the condition need to be satisfied
    - return the document if satisfied otherwise null

17) db.collectionname.find({username:{$exists:true}}) - check whether the given is present. If it is true then return all document having username key.
18) db.collectionname.find({username:{$exists:false}}) - check whether the given is present. If it is false then return all document not having username key.

19) db.users.find({$expr:{$gt:["$balance","$debt"]}}) - return document having balance > debt
20) db.users.find({$expr:{$gt:["$debt","$balance"]}}) - return document having debt > balance

update document

21) db.collectionname.updateOne({name:"aju"},{$inc:{age:2}}) - to increment the value
22) db.collectionname.updateOne({name:"aju"},{$inc:{age:-2}}) - to decrement the value
23) db.collectionname.updateOne({username:"hari"}, {$push:{hobbies:"coding}}) - to push a new valu to an existing array
24) db.collectionname.updateOne({username:"hari"},{J$pop:{hobbies:1}}) - to remove the last value from array
25) db.collectionname.updateOne({username:"hari"},{J$pop:{hobbies:-1}}) - to remove the first value from array
26) db.collectionname.updateOne({username:"hari"},{$set:{"address.pin":"888}}) - to update an object
27) db.collectionname.updateOne({username:'hari'},{$unset:{"address.pin":""}}) - to remove a key from object

delete document
28) db.collectionname.deleteOne({username:"mini"}) - to delete a document with given username
29) db.collectionname.deleteMany({username:{$exists:true}}) - to delete all document having username key

merge collection
----------------

$lookup

-aggregate()

To perform an equality match between a field from the input documents with a field from the documents of the joined collection.

{
   $lookup:
     {
       from: <collection to join>,
       localField: <field from the input documents>,
       foreignField: <field from the documents of the "from" collection>,
       as: <output array field>
     }
}

30) db.collectionname.aggregate({$lookup:{from:"samples",localField:"userId",foreignField:"userId",as:"userSample"}})


JSON Web Token (JWT)
--------------------

JWT is commonly used in modern web application to securely transmit information between the client and the server.

creation
--------

1) install JWT library
2) import the library using require keyword.
3) sign() function is used to craete the token
